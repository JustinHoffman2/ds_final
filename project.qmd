
```{r}
library(tidyverse)
library(caret)
```

```{r}
tracks_csv <- read_csv('./data/tracks.csv', show_col_types = FALSE)
charts <- read_csv('./data/charts.csv', show_col_types = FALSE)
```

```{r}
# Filter charts data frame
charts <- charts |>
  filter(year(date) == 2021 | year(date) == 2020)

# Clean tracks data frame
tracks_csv <- tracks_csv |>
  select(-track_id, -...1, -popularity, -album_name) |>
  distinct(artists, track_name, .keep_all = TRUE) |>
  mutate(explicit = as.factor(explicit)) |>
  mutate(track_genre = as.factor(track_genre))
```

```{r}
# Filter songs inside top 100
inside <- tracks_csv |>
  filter(track_name %in% charts$song) |>
  mutate(top_100 = 1)

# Filter songs outside top 100 & take a random sample
set.seed(100)
outside <- tracks_csv |>
  filter(!track_name %in% charts$song) |>
  sample_n(8918) |>
  mutate(top_100 = 0)

# Combine data frames
tracks <- rbind(inside, outside)
tracks <- tracks_clean |> arrange(track_name)
```

```{r}
# Select only numeric columns (excluding 'top_100' if it's already numeric)
numeric_cols <- tracks |> 
  select(where(is.numeric)) |> 
  select(-top_100)  # Exclude target if it's numeric

# Calculate correlation
cor_df <- cor(numeric_cols, tracks$top_100) |>
  as.data.frame() |>
  rename(correlation = V1) |>
  arrange(desc(abs(correlation)))
```

```{r}
# Plot correlation
ggplot(cor_df, aes(x = reorder(row.names(cor_df), -abs(correlation)), y = correlation, 
                   fill = ifelse(correlation > 0, "Positive", "Negative"))) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = round(correlation, 2)), vjust = -0.5, size = 3) +  # Add values on bars
  scale_fill_manual(values = c("Positive" = "steelblue", "Negative" = "tomato")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +
  labs(
    title = "Feature Correlation with Top 100 Status",
    x = "Feature",
    y = "Correlation Coefficient",
  )
```

```{r}
# Remove low correlation features
removed_features <- cor_df |> 
  filter(abs(correlation) <= 0.01)
removed_features <- rownames(removed_features)
tracks_filtered <- tracks |>
  select(-all_of(removed_features))
```

```{r}

```

