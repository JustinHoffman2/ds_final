
```{r}
library(tidyverse)
set.seed(100)
```

```{r}
tracks_csv <- read_csv('./data/tracks.csv', show_col_types = FALSE)
charts <- read_csv('./data/charts.csv', show_col_types = FALSE)
```

```{r}
# Filter charts data frame
charts <- charts |>
  filter(year(date) == 2021 | year(date) == 2020)

# Clean tracks data frame
tracks_csv <- tracks_csv |>
  select(-track_id, -...1, -popularity, -album_name) |>
  distinct(artists, track_name, .keep_all = TRUE) |>
  mutate(explicit = as.numeric(explicit)) |>
  mutate(track_genre = as.factor(track_genre)) |>
  mutate(duration = duration_ms / 1000, .before = duration_ms) |>
  select(-duration_ms)
```

```{r}
# Filter songs inside top 100
inside <- tracks_csv |>
  filter(track_name %in% charts$song) |>
  mutate(top_100 = 1, .before = duration)

# Filter songs outside top 100 & take a random sample
outside <- tracks_csv |>
  filter(!track_name %in% charts$song) |>
  sample_n(2164) |>
  mutate(top_100 = 0, .before = duration)

# Combine data frames
tracks <- rbind(inside, outside)
tracks <- tracks |> arrange(track_name)
```

```{r}
# Select only numeric columns (excluding top_100)
numeric_cols <- tracks |> 
  select(where(is.numeric)) |> 
  select(-top_100)

# Calculate correlation
cor_df <- cor(numeric_cols, tracks$top_100) |>
  as.data.frame() |>
  rename(correlation = V1) |>
  arrange(desc(abs(correlation)))
```

```{r}
# Plot correlation
ggplot(cor_df, aes(x = reorder(row.names(cor_df), -abs(correlation)), y = correlation, 
                   fill = ifelse(correlation > 0, "Positive", "Negative"))) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = round(correlation, 2)), vjust = -0.5, size = 3) +  # Add values on bars
  scale_fill_manual(values = c("Positive" = "steelblue", "Negative" = "tomato")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +
  labs(
    title = "Feature Correlation with Top 100 Status",
    x = "Feature",
    y = "Correlation Coefficient",
  )
```

```{r}
# Remove low correlation features
removed_features <- cor_df |> 
  filter(abs(correlation) <= 0.02)
removed_features <- rownames(removed_features)
tracks_filtered <- tracks |>
  select(-all_of(removed_features), -artists, -track_name, -track_genre, -energy) |>
  mutate(top_100 = as.factor(top_100))
```

```{r}
# Split into training & test data 80:20 split
df_split <- 
    rsample::initial_split(
        data = tracks_filtered, 
        prop = 0.8)

train_data <- rsample::training(df_split)
test_data <- rsample::testing(df_split)
```

```{r}
# Train logistic model
lr_model <- glm(top_100 ~ ., data = train_data, family = "binomial")
```

```{r}
# Test logistic model
test_data$pred_prob_top100 <- predict(lr_model, newdata = test_data, type = "response")
test_data$pred_top100 <- ifelse(test_data$pred_prob_top100 >= 0.5, 1, 0)
```

```{r}
# Extract coefficients from model
coef_summary <- summary(lr_model)$coefficients

# Convert to a clean data frame
coef_df <- data.frame(
  feature = rownames(coef_summary),
  estimate = coef_summary[, "Estimate"],
  std_error = coef_summary[, "Std. Error"],
  p_value = coef_summary[, "Pr(>|z|)"]
) %>% 
  filter(feature != "(Intercept)")
```

```{r}
# Plot results from model
ggplot(coef_df, aes(x = reorder(feature, estimate), y = estimate, 
                   fill = estimate > 0)) +
  geom_bar(stat = "identity") +
  geom_errorbar(aes(ymin = estimate - std_error, ymax = estimate + std_error),
                width = 0.2) +
  scale_fill_manual(values = c("tomato", "steelblue")) +
  coord_flip() +
  labs(title = "What Predicts a Spotify Top 100 Hit?",
       subtitle = "Blue = increases odds, Red = decreases odds",
       x = "",
       y = "Log-Odds Coefficient") +
  theme_minimal() +
  theme(legend.position = "none")
```
```{r}

```

